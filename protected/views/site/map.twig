{% extends 'views/layouts/main.twig' %}

{% block css %}
    {{ parent() }}
    {{ import('css', 'map.css') }}
{% endblock %}


{% block js %}
    {{ parent() }}
    <script src="https://hammerjs.github.io/dist/hammer.js"></script>
    {{ import('js','snap.svg.js') }}
{% endblock %}


{% block bodyAttr %}
    {# Запрещаем выделение, чтобы при таскании карты ничего лишнего не происходило #}
    onselectstart="return false"
{% endblock %}

{% block content %}
<div class='map-page'>
    <div class='col1'></div>
    <div class='col2-3'>
        <div class='title'>
            Генеральный <lightgrey>план</lightgrey>
        </div>
        <div id='debug' style='width:500px; height:100px'>
        </div>
        <div id='debug2' style='width:500px; height:100px'>
        </div>
    </div>
</div>
{% endblock %}

{% block afterbody %}

    <div class='map-container'>
        <div class='map'>
        </div>
    </div>


    <script type="text/javascript">

        function setMapCoords(svgobject, deltaX, deltaY)
        {
            var coords = svgobject.getAttribute('viewBox').split(' ');
            var width  = parseInt(svgobject.getAttribute('width'));
            var height = parseInt(svgobject.getAttribute('height'));
            var viewPortW = parseInt($('.map').css('width'));
            var viewPortH = parseInt($('.map').css('height'));

            var x = parseInt(coords[0]);
            var y = parseInt(coords[1]);
            var w = parseInt(coords[2]);
            var h = parseInt(coords[3]);

            var ratioW = w / width;
            var ratioH = h / height;

            $('#debug').html('xy ('+x+', '+y+')<br>' + 'wh ('+w+', '+h+')<br>' + 'ratio ('+ratioW+', '+ratioH+')<br>');

            x -= deltaX * ratioW;
            y -= deltaY * ratioH;

            if (x < 0)
                x = 0;
            if (y < 0)
                y = 0;
            if (x > w - viewPortW * ratioW)
                x = w - viewPortW * ratioW;
            if (y > h - viewPortH * ratioH)
                y = h - viewPortH * ratioH;

            svgobject.setAttribute('viewBox', x+' '+y+' '+w+' '+h);
        }

        function centerMapCoords(svgobject)
        {
            var coords = svgobject.getAttribute('viewBox').split(' ');
            var width  = parseInt(svgobject.getAttribute('width'));
            var height = parseInt(svgobject.getAttribute('height'));
            var viewPortW = parseInt($('.map').css('width'));
            var viewPortH = parseInt($('.map').css('height'));

            var x = parseInt(coords[0]);
            var y = parseInt(coords[1]);
            var w = parseInt(coords[2]);
            var h = parseInt(coords[3]);
            x = (w - viewPortW * (w / width)) / 2;
            y = (h - viewPortH * (h / height)) / 2;

            svgobject.setAttribute('viewBox', x+' '+y+' '+w+' '+h);
        }

        function initDragging(svgobject)
        {
            var mc = Hammer(svgobject);
            mc.get('pan').set({ direction: Hammer.DIRECTION_ALL, 'threshold':32 });
            mc.get('pinch').set({ enable: true });
            mc.get('rotate').set({ enable: true });
            mc.get('tap').set({ 'enable': true, 'threshold':32, 'time':1000 });

            var dragging = null;
            var pageX = 0;
            var pageY = 0;

            // Центрируем карту
            centerMapCoords(svgobject);

            mc.on("panstart", function(e) {
                console.log('panstart');
                dragging = svgobject;
                pageX = e.center.x;
                pageY = e.center.y;
            });
            mc.on("panend", function(e) {
                console.log('panend');
                dragging = null;
                pageX = 0;
                pageY = 0;
            });
            mc.on("panmove", function(e) {
                if (dragging) {
                    var deltaX = e.center.x - pageX;
                    var deltaY = e.center.y - pageY;
                    pageX = e.center.x;
                    pageY = e.center.y;

                    $('#debug2').html('xy ('+pageX+', '+pageY+')<br>' + 'delta ('+deltaX+', '+deltaY+')<br>');


                    setMapCoords(svgobject, deltaX, deltaY);
                }
            });

            return mc;
        }

        $('.map').load("/img/map.svg", function (response, status, xhr)
        {
            var svgobject = document.getElementsByTagName('svg')[0];

            mc = initDragging(svgobject);

            // Выправление координат после ресайза
            $(window).on('resize', function(ev) {
                setMapCoords(svgobject, 0, 0);
            });
/*
            // Создаем объект для рисования в SVG
            var snap = Snap('.map svg');

            // Тестирование выделения полигона
            var poly = null;


            mc.on('tap', function(e) {
                console.log('tap');
                if (poly != null) {
                    poly.remove();
                    poly = null;
                    return;
                }
                
                var points = $(e.target).attr('points');
                poly = snap.polyline(points);
                poly.attr('fill', 'rgba(255,0,0,0.3)');
            });

            // $('[id^="_x3"]').mouseover( function() {
            //     if (poly != null) {
            //         poly.remove();
            //         poly = null;
            //     }
            //     var points = $(this).attr('points');
            //     poly = snap.polyline(points);
            //     poly.attr('fill', 'rgba(255,0,0,0.3)');

            //     poly.mouseout( function() {
            //         if (poly != null)
            //             poly.remove();
            //         poly = null;
            //     });
            // });
*/
            // Отключаем нажатие на участках
            $(svgobject).find('rect').css({'pointer-events':'none'});
        });
    </script>
{% endblock %}
